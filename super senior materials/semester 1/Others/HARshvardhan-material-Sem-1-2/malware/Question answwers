Malware Questions
 Q1 What is malware andd its type?

Malware is intrusive software that is designed to damage and destroy computers and computer systems. Malware is a contraction for “malicious software


its type
Virus
Viruses are a subgroup of malware. A virus is malicious software attached to a document or file that supports macros to execute its code and spread from host to host. Once downloaded, the virus will lay dormant until the file is opened and in use. Viruses are designed to disrupt a system’s ability to operate. As a result, viruses can cause significant operational issues and data loss.

Worms
Worms are a malicious software that rapidly replicates and spreads to any device within the network. Unlike viruses, worms do not need host programs to disseminate. A worm infects a device via a downloaded file or a network connection before it multiplies and disperses at an exponential rate. Like viruses, worms can severely disrupt the operations of a device and cause data loss.
Trojan virus
Trojan viruses are disguised as helpful software programs. But once the user downloads it, the Trojan virus can gain access to sensitive data and then modify, block, or delete the data. This can be extremely harmful to the performance of the device. Unlike normal viruses and worms, Trojan viruses are not designed to self-replicate.

Ransomware
Ransomware is malicious software that gains access to sensitive information within a system, encrypts that information so that the user cannot access it, and then demands a financial payout for the data to be released. Ransomware is commonly part of a phishing scam. By clicking a disguised link, the user downloads the ransomware. The attacker proceeds to encrypt specific information that can only be opened by a mathematical key they know. When the attacker receives payment, the data is unlocked.

Spyware
Spyware is malicious software that runs secretly on a computer and reports back to a remote user. Rather than simply disrupting a device’s operations, spyware targets sensitive information and can grant remote access to predators. Spyware is often used to steal financial or personal information.

Q2
Malware lab setup

Step1: Allocate systems for the analysis lab
Oracle VM VirtualBox
VMware Workstation and Fusion
Microsoft Hyper-V
Step 2: Isolate laboratory systems from the production environment
Step 3: Install behavioral analysis tools
File system and registry monitoring: Process Monitor with ProcDOT Process monitoring: Process Explorer and Process Hacker
Network monitoring: Wireshark is a popular network sniffer, 
Change detection: Regshot highlight the key changes malware made to the file system and the registry.
Step 4: Install code-analysis tools
Disassembler and debugger: x64dbg and Ghidra
Memory dumper: 0Scylla0 and 0OllyDumpEx0 
Step 5: Take advantage of automated analysis tools
Any.run
Intezer Analyze
Hybrid Analysis
ThreatConnect


Q..
 Disassemble vs debugger

A disassembler is a computer program that translates machine language into assembly language—the inverse operation to that of an assembler
A disassembler is a computer program that translates machine language into assembly language—the inverse operation to that of an assembler
Assembly language source code generally permits the use of constants and programmer comments. These are usually removed from the assembled machine code by the assembler. 

If so, a disassembler operating on the machine code would produce disassembly lacking these constants and comments; the disassembled output becomes more difficult for a human to interpret than the original annotated source code

Some disassemblers provide a built-in code commenting feature where the generated output gets enriched with comments regarding called API functions or parameters of called functions. Some disassemblers make use of the symbolic debugging information present in object files such as ELF. 

A disassembler may be stand-alone or interactive. A stand-alone disassembler, when executed, generates an assembly language file which can be examined; an interactive one shows the effect of any change the user makes immediately. For example, the disassembler may initially not know that a section of the program is actually code, and treat it as data; if the user specifies that it is code, the resulting disassembled code is shown immediately, allowing the user to examine it and take further action during the same run. 



Q what is root kit

Rootkits are a collection of tools or sets of applications that allow the administrator-level access to a computer or a network. These rootkits are fed into the host computer by a cracker (malicious hacker) either by exploiting a known vulnerability of the system or cracking the password. These rootkits hide their presence using some of the operating system's low layers, which makes them almost undetectable by standard anti-malware software. So the name implies where 'rootkit' is a compound of two words 'root' and 'kit' where root describes the most privileged user on the computer, and kit describes the set of tools to implement. The rootkit has a synonym with malware, which describes malware with root capabilities. 
The kernel is the primary component of an operating system. It serves as an intermediate connector between the application and the hardware. The Windows kernel has been designed with flexibility in mind. The windows OS kernel code runs in the highest privileged mode in the system, the Kernel-mode. As because all software and programs don't require system resources and hardware manipulation, a lower privileged mode also exists, knows as User-mode, where this application runs. 
As in the Windows operating system, there are two modes a code can execute in: the unrestricted kernel mode and the private, restricted user mode. Rootkits can exist in both of these modes. Rootkits can be either legitimate or malicious; i.e., they may get installed as a part of the legitimate application or through some Trojans via some suspicious email attachments. There are two types of windows rootkits, which are aptly called: 
    1. User-mode Rootkits: These rootkits function in user-mode or the low privileged level of the processor ring—the effect of these types of rootkits limits on the user level only via an affected application. If the rootkit wants to infect other applications, they'd need to do the same work in every application's memory space. They operate mostly by hijacking or hooking function calls. 
    2. Kernel-mode Rootkits: operates on kernel-mode or highest privileged level, i.e., in the kernel space. It makes rootkits powerful as they reside in the lowest operating system level, which means its controlling capability is strong over the hardware and the operating system. Most kernel-level rootkits take advantage of hooking execution, transmitting to kernel mode, and utilizing a loadable kernel module (LKM) to enhance kernel functionalities with rootkit code. It has a subtype also - the 'bootkit,' which infects the startup programs and codes like MBR (Master Boot Record), VBR (Volume Boot Record), and effects like boot sector viruses and creates malfunction at the time of booting. 
Rootkits use three different techniques that were coded in them. These are: 
    1. Hooking: is the most common function of al rootkits, which involves hooking the application's execution flow. They re-direct the normal flow of execution and point to its code. It is internally done when the API calls and the system function calls are intercepted. 
    2. DLL Injection: is the mechanism of loading a dynamic link library (DLL) into a running process address space. In malware and rootkits, the DLL injection attack is a malicious one with a DLL file that exports malicious functions and patches or modifies the registry key. Since these malicious DLL can be loaded easily, so it can be injected into processes of USER32.DLL. 
    3. Kernel Object Manipulation: is considered to be the most advanced technology used by malware writers. This type of attack contains kernel structure modification, bypassing the kernel object manager to avoid access checks. Most of the kernel's data structure gets modified as the kernel is itself under the siege of this attack. Although this technique is advanced-most, it isn't very easy too. Manipulating the kernel object needs the understanding of that object in detail also. 

